version: 2.1
aliases:
- &ssh-fingerprint
    fingerprints:
      - "ae:83:a5:6c:93:c9:16:57:ec:21:b9:6f:9c:5a:10:9c"
- &install-dependencies
  name: Install Node Dependencies
  command: npm install
- &test
  name: Test
  command: npm run test -- --collectCoverage --testResultsProcessor=jest-sonar-reporter
- &build
  name: Build
  command: npm run build
- &GCP-auth
  name: GCP Authenticate
  command: |
    echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
    /tools/gcp_authenticate.sh
- &docker-login
  name: Docker login
  command: |
    docker login -u _json_key -p"$DOCKER_PASSWORD" https://eu.gcr.io
- &docker-build-and-push
  name: Docker build and push
  command: |
    echo 'export CIRCLE_PROJECT_REPONAME="$CIRCLE_PROJECT_REPONAME"' >> $BASH_ENV
    echo 'export VERSION="$VERSION"' >> $BASH_ENV
    IMAGE="eu.gcr.io/entur-system-1287/${CIRCLE_PROJECT_REPONAME}"
    docker build -t ${IMAGE} .
    docker tag "${IMAGE}" "${IMAGE}":"${VERSION}"
    docker push "${IMAGE}"
- &tag-git-version
  name: Tag git commit with build version and push to github
  command: |
    git config --global user.email "circleci@entur.no"
    git config --global user.name "circleci"
    git tag $VERSION
    git push origin $VERSION
- &create-image-version
      name: Create new image version and store to env var and as file in workspace
      command: |
        echo "export VERSION=$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)"  >> $BASH_ENV
- &save-dependency-cache
  paths:
  - node_modules
  key: node_modules-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
- &restore-dependency-cache
  name: Restore dependency cache
  keys:
  - node_modules-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
- &sonar-scanner
  name: Sonar scanner
  command: |
    sonar-scanner \
        -Dsonar.projectKey=entur_${CIRCLE_PROJECT_REPONAME} \
        -Dsonar.organization=${SONAR_ORG} \
        -Dsonar.projectName=${CIRCLE_PROJECT_REPONAME} \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=${ENTUR_SONAR_PASSWORD} \
        -Dsonar.sources=src \
        -Dsonar.cpd.exclusions=src/i18n/translations/*.ts \
        -Dsonar.tests=src \
        -Dsonar.test.inclusions=src/**/*.spec.ts,src/**/*.spec.tsx,src/**/*.test.ts,src/**/*.test.tsx \
        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
        -Dsonar.testExecutionReportPaths=test-report.xml
- &sonar-scanner-pull-request
  name: Sonar scanner pull request
  command: |
    sonar-scanner \
        -Dsonar.projectKey=entur_${CIRCLE_PROJECT_REPONAME} \
        -Dsonar.organization=${SONAR_ORG} \
        -Dsonar.projectName=${CIRCLE_PROJECT_REPONAME} \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=${ENTUR_SONAR_PASSWORD} \
        -Dsonar.sources=src \
        -Dsonar.cpd.exclusions=src/i18n/translations/*.ts \
        -Dsonar.tests=src \
        -Dsonar.test.inclusions=src/**/*.spec.ts,src/**/*.spec.tsx,src/**/*.test.ts,src/**/*.test.tsx \
        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
        -Dsonar.testExecutionReportPaths=test-report.xml \
        -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} \
        -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
        -Dsonar.pullrequest.base=master

executors:
    circleci-toolbox:
      docker:
        - image: eu.gcr.io/entur-system-1287/circleci-toolbox-image-java11
          auth:
            username: _json_key
            password: $DOCKER_PASSWORD

jobs:
  install:
    executor: circleci-toolbox
    steps:
    - checkout
    - run: *install-dependencies
    - save_cache: *save-dependency-cache
  test-build:
    executor: circleci-toolbox
    steps:
    - checkout
    - restore_cache: *restore-dependency-cache
    - run: *build
    - run: *test
    - run: *sonar-scanner-pull-request
  build:
    executor: circleci-toolbox
    steps:
    - checkout
    - restore_cache: *restore-dependency-cache
    - run: *build
    - run: *test
    - run: *sonar-scanner
    - run: *create-image-version
    - run: *tag-git-version
    - run: *GCP-auth
    - setup_remote_docker:
        docker_layer_caching: true
    - run: *docker-login
    - run: *docker-build-and-push
workflows:
  install-test-build-deploy:
    jobs:
    - install:
        name: npm-install
        context: org-carbon
    - test-build:
        name: npm-test-build
        context: org-carbon
        requires:
        - npm-install
        filters:
          branches:
            ignore:
            - master
    - build:
        name: npm-build
        context: org-carbon
        requires:
        - npm-install
        filters:
          branches:
            only:
            - master
